#!/bin/bash

# --- Robust Demo Startup Script ---
# This script is idempotent and uses a simple, proven NGINX configuration.

# Color codes for clear output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}--- Preparing Demo Environment ---${NC}"

# 1. Pre-flight Cleanup
echo "🧹 Performing pre-flight cleanup..."
docker-compose -f compose.yml -f compose.dev.yml down > /dev/null 2>&1
sudo brew services stop nginx > /dev/null 2>&1
echo "✅ Cleanup complete."

# 2. Detect Local IP Address
LOCAL_IP=$(ipconfig getifaddr en0)
if [ -z "$LOCAL_IP" ]; then
    echo -e "${RED}Error: Could not detect your local network IP address.${NC}"
    echo -e "${YELLOW}Please ensure you are connected to a Wi-Fi or Ethernet network.${NC}"
    exit 1
fi
echo -e "✅ Detected local IP: ${YELLOW}${LOCAL_IP}${NC}"

# 3. Generate Dynamic SSL Certificate
CERT_DIR="$(pwd)/certs"
mkdir -p "$CERT_DIR"
CERT_FILE="$CERT_DIR/local-cert.pem"
KEY_FILE="$CERT_DIR/local-cert-key.pem"

echo "🔑 Generating SSL certificate for localhost and ${LOCAL_IP}..."
mkcert -cert-file "$CERT_FILE" -key-file "$KEY_FILE" localhost 127.0.0.1 ::1 "$LOCAL_IP" > /dev/null 2>&1
echo -e "✅ Certificate generated."

# 4. Generate NGINX Configuration
NGINX_CONF_PATH="/opt/homebrew/etc/nginx/servers/todo-app.conf"
echo "📝 Creating NGINX configuration..."

# --- THIS IS THE RESTORED, WORKING NGINX LOGIC FROM YOUR FILE ---
sudo tee "$NGINX_CONF_PATH" > /dev/null <<EOF
# This file is auto-generated by start-demo.sh.
# It uses a proven, simple routing configuration.

server {
    listen 80;
    server_name localhost ${LOCAL_IP};
    return 301 https://\$host\$request_uri;
}

server {
    listen 443 ssl http2;
    server_name localhost ${LOCAL_IP};

    ssl_certificate ${CERT_FILE};
    ssl_certificate_key ${KEY_FILE};

    # --- Proxy for ALL main backend traffic (API + Chat) ---
    # This single, robust block handles all paths for the main API.
    location ~ ^/(ai|lists|/\d+/items)/ {
        proxy_pass http://localhost:8000;
        
        # Complete Proxy Headers
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Complete WebSocket Headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
    }
    
    # --- Proxy for the Voice Service WebSocket ---
    location /ws/ {
         proxy_pass http://localhost:8001;
         proxy_set_header Host \$host;
         proxy_http_version 1.1;
         proxy_set_header Upgrade \$http_upgrade;
         proxy_set_header Connection "upgrade";
         proxy_read_timeout 86400;
    }

    # --- Proxy for the Frontend UI (Catch-all) ---
    location / {
        proxy_pass http://localhost:5173;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
echo -e "✅ NGINX configuration created."

# 5. Start Services
echo "🚀 Starting services..."

echo "-> Starting NGINX reverse proxy..."
if ! sudo nginx -t; then
    echo -e "${RED}Error: NGINX configuration test failed. Aborting.${NC}"
    exit 1
fi
sudo brew services start nginx
echo "✅ NGINX is running."

echo "-> Starting Docker containers..."
if ! docker-compose -f compose.yml -f compose.dev.yml up --build -d; then
    echo -e "${RED}Error: Docker Compose failed to start.${NC}"
    sudo brew services stop nginx
    exit 1
fi
echo "✅ Docker stack is up."

# 6. Final Instructions
echo -e "\n${GREEN}--- 🎉 Demo is Ready! ---${NC}"
echo -e "Share this URL with anyone on your Wi-Fi network:"
echo -e "${YELLOW}https://${LOCAL_IP}${NC}"
echo -e "\n(They will need to accept the one-time security warning.)"
echo -e "\nTo view logs, run: ${YELLOW}docker-compose logs -f${NC}"
echo -e "To shut down, run: ${YELLOW}./stop-demo.sh${NC}"