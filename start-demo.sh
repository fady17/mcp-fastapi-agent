#!/bin/bash

# --- Portable Demo Startup Script ---
# Detects the local IP, generates dynamic SSL certs and NGINX config,
# starts all services, and displays a QR code for easy access.

# --- Configuration ---
# You can change the main port here if you ever need to.
# NGINX will listen on 443, but the URL in the QR code can be different.
# For this setup, the standard HTTPS port (443) is used implicitly.
# PORT="443" # Not needed unless you change the listen directive

# --- Style and Helper Variables ---
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

echo -e "${GREEN}--- Preparing Demo Environment ---${NC}"

# --- 1. Pre-flight Check for Dependencies ---
if ! command -v mkcert &> /dev/null; then
    echo -e "${RED}Error: mkcert is not installed.${NC} Please run: ${YELLOW}brew install mkcert${NC}"; exit 1;
fi
if ! command -v qrencode &> /dev/null; then
    echo -e "${RED}Error: qrencode is not installed.${NC} Please run: ${YELLOW}brew install qrencode${NC}"; exit 1;
fi

# --- 2. Pre-flight Cleanup ---
echo "🧹 Performing pre-flight cleanup..."
# Use the specific compose files to avoid ambiguity
docker-compose -f compose.yml > /dev/null 2>&1
sudo brew services stop nginx > /dev/null 2>&1
echo "✅ Cleanup complete."

# --- 3. Detect Local IP Address ---
LOCAL_IP=$(ipconfig getifaddr en0)
if [ -z "$LOCAL_IP" ]; then
    echo -e "${RED}Error: Could not detect your local network IP address.${NC}"
    echo -e "${YELLOW}Please ensure you are connected to a Wi-Fi or Ethernet network.${NC}"
    exit 1
fi
echo -e "✅ Detected local IP: ${YELLOW}${LOCAL_IP}${NC}"

# --- 4. Generate Dynamic SSL Certificate ---
CERT_DIR="$(pwd)/certs"
mkdir -p "$CERT_DIR"
CERT_FILE="$CERT_DIR/demo-cert.pem"
KEY_FILE="$CERT_DIR/demo-cert-key.pem"

echo "🔑 Generating SSL certificate valid for ${LOCAL_IP}..."
mkcert -cert-file "$CERT_FILE" -key-file "$KEY_FILE" localhost "$LOCAL_IP" > /dev/null 2>&1
echo -e "✅ Certificate generated."

# --- 5. Generate NGINX Configuration ---
NGINX_CONF_PATH="/opt/homebrew/etc/nginx/servers/todo-app.conf"
echo "📝 Creating NGINX configuration..."
sudo tee "$NGINX_CONF_PATH" > /dev/null <<EOF
# This file is auto-generated by start-demo.sh.
server {
    listen 80;
    server_name ${LOCAL_IP};
    return 301 https://\$host\$request_uri;
}
server {
    listen 443 ssl http2;
    server_name ${LOCAL_IP};

    ssl_certificate ${CERT_FILE};
    ssl_certificate_key ${KEY_FILE};

    if (\$host = "${LOCAL_IP}") {
        return 301 https://todo-demo.local\$request_uri;
    }

    # The simple, proven proxy logic
    location /api/ {
        rewrite ^/api/(.*)$ /\$1 break;
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
   
    location / {
        proxy_pass http://127.0.0.1:5173;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF
echo -e "✅ NGINX configuration created."

# --- 6. Start Services ---
echo "🚀 Starting services..."
if ! sudo nginx -t; then
    echo -e "${RED}NGINX config test failed. Aborting.${NC}"; exit 1;
fi
sudo brew services start nginx
echo "✅ NGINX is running."

if ! docker compose -f compose.yml up -d --build; then
    echo -e "${RED}Docker Compose failed to start.${NC}"; sudo brew services stop nginx; exit 1;
fi
echo "✅ Docker stack is up."

# --- 7. Final Instructions & QR Code ---
DEMO_URL="https://${LOCAL_IP}"
echo -e "\n${GREEN}--- 🎉 Demo is Ready! ---${NC}"
echo -e "Ask teammates on your Wi-Fi to scan the QR code or visit:"
echo -e "${YELLOW}${DEMO_URL}${NC}"
echo -e "\n(They must accept the one-time security warning in their browser.)\n"

# Generate the QR code directly in the terminal
echo "${DEMO_URL}" | qrencode -t UTF8

echo -e "\nTo view live logs, run: ${YELLOW}docker-compose logs -f${NC}"
echo -e "To shut down, run: ${YELLOW}./stop-demo.sh${NC}"

#  location /voice-api/ {
#         rewrite ^/voice-api/(.*)$ /\$1 break;
#         proxy_pass http://127.0.0.1:8001;
#         proxy_set_header Upgrade \$http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_set_header Host \$host;
#     }
# #!/bin/bash

# # --- Robust Demo Startup Script ---
# # This script is idempotent and uses a simple, proven NGINX configuration.
# # --- Configuration ---
# DEMO_IP="192.168.2.1"
# DEV_DOMAIN="app.fady.dev"
# # The base domain is needed for the resolver file.
# BASE_DOMAIN="fady.dev"

# # Color codes for clear output
# GREEN='\033[0;32m'
# YELLOW='\033[1;33m'
# RED='\033[0;31m'
# NC='\033[0m'

# echo -e "${GREEN}--- Preparing Demo Environment ---${NC}"

# # 1. Pre-flight Cleanup
# echo "🧹 Performing pre-flight cleanup..."
# docker-compose -f compose.yml -f compose.dev.yml down > /dev/null 2>&1
# sudo brew services stop nginx > /dev/null 2>&1
# # sudo brew services stop dnsmasq > /dev/null 2>&1
# echo "✅ Cleanup complete."

# # 2. Detect Local IP Address
# # LOCAL_IP=$(ipconfig getifaddr en0)
# # if [ -z "$LOCAL_IP" ]; then
# #     echo -e "${RED}Error: Could not detect your local network IP address.${NC}"
# #     echo -e "${YELLOW}Please ensure you are connected to a Wi-Fi or Ethernet network.${NC}"
# #     exit 1
# # fi
# # echo -e "✅ Detected local IP: ${YELLOW}${LOCAL_IP}${NC}"

# # --- 3. Dynamically Generate dnsmasq Configuration ---
# # DNSMASQ_CONF="/opt/homebrew/etc/dnsmasq.d/dev-domains.conf"
# # echo "📝 Updating dnsmasq to point *.${BASE_DOMAIN} to ${LOCAL_IP}..."
# # # This command creates/overwrites the config file, injecting the current local IP.
# # echo "address=/.${BASE_DOMAIN}/${LOCAL_IP}" | sudo tee "$DNSMASQ_CONF" > /dev/null
# # echo "✅ dnsmasq configuration created."

# # 4. Generate Dynamic SSL Certificate
# # 2. Generate SSL Certificate for the custom domain
# CERT_DIR="$(pwd)/certs"
# mkdir -p "$CERT_DIR"
# CERT_FILE="$CERT_DIR/dev-cert.pem"
# KEY_FILE="$CERT_DIR/dev-cert-key.pem"


# # echo "🔑 Generating SSL certificate for localhost and ${LOCAL_IP}..."
# # mkcert -cert-file "$CERT_FILE" -key-file "$KEY_FILE" localhost 127.0.0.1 ::1 "$LOCAL_IP" > /dev/null 2>&1
# # echo -e "✅ Certificate generated."

# # The certificate must be valid for the domain and the hotspot IP
# echo "🔑 Generating SSL certificate for ${DEV_DOMAIN} and ${DEMO_IP}..."
# mkcert -cert-file "$CERT_FILE" -key-file "$KEY_FILE" "${DEV_DOMAIN}" "${DEMO_IP}" localhost 127.0.0.1 > /dev/null 2>&1
# echo -e "✅ Certificate generated."

# # 4. Generate NGINX Configuration
# NGINX_CONF_PATH="/opt/homebrew/etc/nginx/servers/todo-app.conf"
# echo "📝 Creating NGINX configuration..."

# # --- THIS IS THE RESTORED, WORKING NGINX LOGIC FROM YOUR FILE ---
# sudo tee "$NGINX_CONF_PATH" > /dev/null <<EOF
# # This file is auto-generated by start-demo.sh.
# # It uses a proven, simple routing configuration.

# server {
#     listen 80;
#     server_name ${DEV_DOMAIN};
#     return 301 https://\$host\$request_uri;
# }

# server {
#     listen 443 ssl http2;
#     server_name ${DEV_DOMAIN};

#     ssl_certificate ${CERT_FILE};
#     ssl_certificate_key ${KEY_FILE};

#     # --- Proxy for ALL main backend traffic (API + Chat) ---
#     # This single, robust block handles all paths for the main API.
#     location ~ ^/(ai|lists|/\d+/items)/ {
#         proxy_pass http://localhost:8000;
        
#         # Complete Proxy Headers
#         proxy_set_header Host \$host;
#         proxy_set_header X-Real-IP \$remote_addr;
#         proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto \$scheme;
        
#         # Complete WebSocket Headers
#         proxy_http_version 1.1;
#         proxy_set_header Upgrade \$http_upgrade;
#         proxy_set_header Connection "upgrade";
#         proxy_read_timeout 86400;
#     }
    
#     # --- Proxy for the Voice Service WebSocket ---
#     location /ws/ {
#          proxy_pass http://localhost:8001;
#          proxy_set_header Host \$host;
#          proxy_http_version 1.1;
#          proxy_set_header Upgrade \$http_upgrade;
#          proxy_set_header Connection "upgrade";
#          proxy_read_timeout 86400;
#     }

#     # --- Proxy for the Frontend UI (Catch-all) ---
#     location / {
#         proxy_pass http://localhost:5173;
#         proxy_set_header Host \$host;
#         proxy_set_header X-Real-IP \$remote_addr;
#         proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto \$scheme;
#     }
# }
# EOF
# echo -e "✅ NGINX configuration created."

# # 6. Start Services
# echo "🚀 Starting services..."

# # echo "-> Starting dnsmasq service..."
# # sudo brew services start dnsmasq
# # echo "✅ dnsmasq is running."

# # echo "-> Starting NGINX reverse proxy..."
# # if ! sudo nginx -t; then
# #     echo -e "${RED}Error: NGINX configuration test failed. Aborting.${NC}"
# #     exit 1
# # fi
# # sudo brew services start nginx
# # echo "✅ NGINX is running."

# # echo "-> Starting Docker containers..."
# # if ! docker-compose -f compose.yml -f compose.dev.yml up --build -d; then
# #     echo -e "${RED}Error: Docker Compose failed to start.${NC}"
# #     sudo brew services stop nginx
# #     exit 1
# # fi
# # echo "✅ Docker stack is up.

# # 4. Start Services
# echo "🚀 Starting services..."
# if ! sudo nginx -t; then
#     echo -e "${RED}NGINX config test failed.${NC}"; exit 1;
# fi
# sudo brew services restart nginx # Restart to load new config
# echo "✅ NGINX is running."

# if ! docker-compose -f compose.yml -f compose.dev.yml up --build -d; then
#     echo -e "${RED}Docker Compose failed.${NC}"; sudo brew services stop nginx; exit 1;
# fi
# echo "✅ Docker stack is up."

# # --- 7. Final Instructions ---
# echo -e "\n${GREEN}--- 🎉 Demo is Ready! ---${NC}"
# echo -e "1. Ensure 'Internet Sharing' hotspot is ON on this Mac."
# echo -e "2. Ask teammates to connect to your Wi-Fi hotspot."
# echo -e "3. Tell them to open their browser and go to:"
# echo -e "${YELLOW}https://${DEV_DOMAIN}${NC}"
# echo -e "\n(They will still need to accept the one-time security warning.)"
# echo -e "\nTo view logs, run: ${YELLOW}docker-compose logs -f${NC}"
# echo -e "To shut down, run: ${YELLOW}./stop-demo.sh${NC}"