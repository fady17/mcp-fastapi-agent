#  DONT USE THE DOCKERS
# AI Agent with MCP Integration

## How to Run the Stack
the scripts is not recommended

#### Prerequisites
*   [Docker Desktop](https://www.docker.com/products/docker-desktop/) installed and running.
*   [LM Studio](https://lmstudio.ai/) installed, with a model downloaded, and the AI server started.

#### Step-by-Step Instructions

1.  **Configure Environment:**
    *   In the `todo-list` directory, create a file named `.env`.
    *   Copy the contents of the `.env.example` file (if provided) or add the following:
      ```
      # PostgreSQL Settings
      POSTGRES_USER=appuser
      POSTGRES_PASSWORD=a-strong-password
      POSTGRES_DB=todo_db

      # Docker Host IP for container-to-host communication
      DOCKER_HOST_IP=host.docker.internal
      LIVEKIT_API_KEY=devkey
      LIVEKIT_API_SECRET=secret
      ```

2.  **Start the Application Stack:**
    *   Navigate to the `todo-list` directory in your terminal.
  
      ```bash
      livekit-server --dev
      # From the todo-list directory
    docker compose -f compose.infra.yml up --build
        #in a new terminal
    uvicorn app.main:app --reload --host 0.0.0.0 --port 8000
        #in a new terminal
    cd frontend
    npm i
    npm run dev


      ```
    *   This will build the images and start all the services (database, and TURN server).

3.  **Access the Application:**
    *   Open your web browser and go to: `http://localhost:5173`

## Technology Stack

*   **Backend:** Python / FastAPI
*   **Frontend:** React / TypeScript / Vite
*   **Database:** PostgreSQL
*   **Real-Time Communication:** WebRTC with a CoTURN server (live kit now)
*   **AI Model Hosting:** LM Studio
*   **Containerization:** Docker / Docker Compose

# Commands i use
alembic revision --autogenerate -m "Create initial todo_lists and todo_items tables"
alembic upgrade head

turnserver -c turnserver.conf 

uvicorn app.main:app --reload --host 0.0.0.0 --port 8000


docker-compose -f docker-compose.yml -f docker-compose.dev.yml up --build


stop and remove all containers:
docker-compose -f docker-compose.yml -f docker-compose.dev.yml down

mkcert localhost 127.0.0.1 ::1 192.168.1.3


 docker-compose -f compose.yml -f compose.dev.yml up --build
<!-- sudo brew services start dnsmasq -->
sudo nginx